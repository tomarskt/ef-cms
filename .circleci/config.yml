version: 2.1
commands:
  setupEnv:
    steps:
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
  buildDockerImage:
    description: "Builds the docker image"
    parameters:
    steps:
      - run:
          name: Build Docker Image
          command: |
            if [[ $(./web-api/deploy-diff.sh $ENV web-api/runtimes/puppeteer) = "true" ]]; then
              cd web-api/runtimes/puppeteer && ./build.sh && cd ../../..
            fi

            if [[ $(./web-api/deploy-diff.sh $ENV web-api/runtimes/clamav) = "true" ]]; then
              cd web-api/runtimes/clamav && ./build.sh && cd ../../..
            fi

            docker build -t efcms -f Dockerfile .
  deployApiLayerEast:
    description: "A less-verbose means of deploying API Layers to East"
    parameters:
      layerNameCased:
        type: string
      serverlessRunName:
        type: string
      deployIf:
        default: true
        type: boolean
    steps:
      - run:
          name: Deploy - Web API - Layers - << parameters.layerNameCased >> - us-east-1
          command: <<# parameters.deployIf >>docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-<< parameters.serverlessRunName >>.sh ${ENV} us-east-1<</ parameters.deployIf >>"
  deployApiLayerWest:
    description: "A less-verbose means of deploying API Layers to West"
    parameters:
      layerNameCased:
        type: string
      serverlessRunName:
        type: string
      deployIf:
        default: true
        type: boolean
    steps:
      - run:
          name: Deploy - Web API - Layers - << parameters.layerNameCased >> - us-west-1
          command: <<# parameters.deployIf >>docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-<< parameters.serverlessRunName >>.sh ${ENV} us-east-1<</ parameters.deployIf >>"
  sonarQube:
    description: "Runs SonarQube"
      parameters:
        apiKey:
          type: string
        token:
          type: string
        baseDir:
          type: string
      steps:
        - run:
          name: SonarQube (<< parameters.baseDir >>)
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            /home/app/sonar_home/bin/sonar-scanner \
            -Dsonar.projectKey="<< parameters.apiKey >>" \
            -Dsonar.branch.name="${CIRCLE_BRANCH}" \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectBaseDir="<< parameters.baseDir >>" \
            -Dproject.settings="<< parameters.baseDir >>/sonar-project.properties" \
            -Dsonar.login="<< parameters.token >>" \
            -Dsonar.host.url="https://sonarcloud.io"
jobs:
  bundle:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - restore_cache:
          name: Source - Restoring Cache
          keys:
            - source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
            - source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - source-{{ .Environment.CACHE_VERSION }}-
      - checkout
      - save_cache:
          name: Source - Saving Cache
          key: source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - run:
          name: NPM - Install
          command: npm ci && npm rebuild node-sass
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build-api:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Lint
          command: |
            npm run lint
      - run:
          name: Shellcheck
          command: |
            ./run-shellcheck.sh
      - run:
          name: Web API - Test
          command: npm run test:api
      - sonarQube:
        - apiKey: "${API_SONAR_KEY}"
        - baseDir: "web-api"
        - token: "${API_SONAR_TOKEN}"

  build-shared:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    environment:
      _JAVA_OPTIONS: '-Xms1024m -Xmx2024m'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Shared - Test
          command: npm run test:shared
      - sonarQube:
        - apiKey: "${SHARED_SONAR_KEY}"
        - baseDir: "shared"
        - token: "${SHARED_SONAR_TOKEN}"

  build-client:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    environment:
      _JAVA_OPTIONS: '-Xms1024m -Xmx2048m'
    resource_class: 2xlarge
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Web Client - Test
          command: |
            AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npm run start:api:ci > /dev/null &
            ./wait-until.sh http://localhost:3000/api/swagger
            AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npm run test:client
      - sonarQube:
        - apiKey: "${UI_SONAR_KEY}"
        - baseDir: "web-client"
        - token: "${UI_SONAR_TOKEN}"

  e2e-pa11y:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    environment:
      _JAVA_OPTIONS: '-Xms2048m -Xmx4096m'
    resource_class: 2xlarge
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create Pa11y Artifacts Directory
          command: mkdir /tmp/pa11y
      - run:
          name: Pa11y - Web Client 1
          command: |
            npm run build:all
            SLS_DEBUG="*" RUN_DIR=dist AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npx run-p start:api:ci start:client:ci > /tmp/pa11y/pa11y-server-1.txt &
            ./wait-until-services.sh
            ./wait-until.sh http://localhost:9000
            ./wait-until.sh http://localhost:3000/api/swagger
            sleep 15
            npm run test:pa11y:1 --node-flags --max-old-space-size=1024
      - run:
          name: Pa11y - Web Client 2
          command: |
            npm run build:all
            SLS_DEBUG="*" RUN_DIR=dist AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npx run-p start:api:ci start:client:ci > /tmp/pa11y/pa11y-server-2.txt &
            ./wait-until-services.sh
            ./wait-until.sh http://localhost:9000
            ./wait-until.sh http://localhost:3000/api/swagger
            sleep 15
            npm run test:pa11y:2 --node-flags --max-old-space-size=1024
      - run:
          name: Pa11y - Web Client 3
          command: |
            npm run build:all
            SLS_DEBUG="*" RUN_DIR=dist AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npx run-p start:api:ci start:client:ci > /tmp/pa11y/pa11y-server-2.txt &
            ./wait-until-services.sh
            ./wait-until.sh http://localhost:9000
            ./wait-until.sh http://localhost:3000/api/swagger
            sleep 15
            npm run test:pa11y:3 --node-flags --max-old-space-size=1024
      - run:
          name: Pa11y - Public Site
          command: |
            AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npx run-p start:public > /tmp/pa11y/pa11y-server-public.txt &
            sleep 15
            npm run test:pa11y:public
      - store_artifacts:
          path: /tmp/pa11y

  e2e-cypress:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    environment:
      _JAVA_OPTIONS: '-Xms1024m -Xmx2048m'
    resource_class: 2xlarge
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cypress
          command: |
            npm run build:all &&
            CYPRESS_VERSION=`./node_modules/.bin/cypress --version | awk -F' ' '{print $4; exit}'`
            if [ ! -e "/root/.cache/Cypress/${CYPRESS_VERSION}/Cypress/Cypress" ]; then
              ./node_modules/.bin/cypress install
            fi

            TEMP_DOCUMENTS_BUCKET_NAME=noop-temp-documents-local-us-east-1 DOCUMENTS_BUCKET_NAME=noop-documents-local-us-east-1 S3_ENDPOINT=http://localhost:9000 MASTER_DYNAMODB_ENDPOINT=http://localhost:8000  AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop SLS_DEPLOYMENT_BUCKET=noop npx run-p start:api:ci start:client:ci > /dev/null &
            ./wait-until-services.sh
            ./wait-until.sh http://localhost:9000
            ./wait-until.sh http://localhost:3000/api/swagger
            sleep 5
            npm run cypress
      - store_artifacts:
          path: /root/project/cypress/videos/

  pre-deploy:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - setupEnv
      - buildDockerImage
      - run:
          name: Setup Post Confirmation Arn
          command: echo "export POST_CONFIRMATION_ROLE_ARN=$(./get-post-confirmation-role-arn.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: Setup Dynamsoft Keys
          command: echo "export DYNAMSOFT_PRODUCT_KEYS='$(./get-keys.sh $CIRCLE_BRANCH)'" >> $BASH_ENV
      - run:
          name: Setup ES Instance Count
          command: echo "export ES_INSTANCE_COUNT='$(./get-es-instance-count.sh $CIRCLE_BRANCH)'" >> $BASH_ENV
      - run:
          name: 'Deploy - Web Client - Terraform'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "DYNAMSOFT_S3_ZIP_PATH=${DYNAMSOFT_S3_ZIP_PATH}" -e "DYNAMSOFT_URL=${DYNAMSOFT_URL}"  -e "DYNAMSOFT_PRODUCT_KEYS=${DYNAMSOFT_PRODUCT_KEYS}" -e "IS_DYNAMSOFT_ENABLED=${IS_DYNAMSOFT_ENABLED}" --rm efcms /bin/sh -c "cd web-client/terraform/main && ../bin/deploy-app.sh $ENV"
      - run:
          name: 'Deploy - Web API - Terraform'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "COGNITO_SUFFIX=${COGNITO_SUFFIX}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "SES_DMARC_EMAIL=${SES_DMARC_EMAIL}" -e "POST_CONFIRMATION_ROLE_ARN=${POST_CONFIRMATION_ROLE_ARN}" -e "CLOUDWATCH_ROLE_ARN=${CLOUDWATCH_ROLE_ARN}" -e "ES_INSTANCE_COUNT=${ES_INSTANCE_COUNT}" --rm efcms /bin/sh -c "cd web-api/terraform/main && ../bin/deploy-app.sh ${ENV}"
      - run:
          name: 'Setup SNS Subscription'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "COGNITO_SUFFIX=${COGNITO_SUFFIX}" -e "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "SES_DMARC_EMAIL=${SES_DMARC_EMAIL}" -e "POST_CONFIRMATION_ROLE_ARN=${POST_CONFIRMATION_ROLE_ARN}" -e "CLOUDWATCH_ROLE_ARN=${CLOUDWATCH_ROLE_ARN}" -e "ES_INSTANCE_COUNT=${ES_INSTANCE_COUNT}" --rm efcms /bin/sh -c "cd web-api && ./setup-sns-subscriptions.sh ${ENV}"
      - run:
          name: Setup Elasticsearch Index Settings
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/setup-elasticsearch-index.sh ${ENV}"

  deploy-api-east:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - setupEnv
      - buildDockerImage
      - deployApiLayerEast:
          layerNameCased: Public Puppeteer
          serverlessRunName: puppeteer
          deployIf: $(./web-api/deploy-diff.sh $ENV web-api/runtimes/puppeteer) = "true"
      - deployApiLayerEast:
          layerNameCased: Public ClamAV
          serverlessRunName: clamav
          deployIf: $(./web-api/deploy-diff.sh $ENV web-api/runtimes/clamav) = "true"
      - deployApiLayerEast:
          layerNameCased: Public API
          serverlessRunName: public-api
      - deployApiLayerEast:
          layerNameCased: API
          serverlessRunName: api
      - deployApiLayerEast:
          layerNameCased: Cases
          serverlessRunName: cases
      - deployApiLayerEast:
          layerNameCased: Case Parties
          serverlessRunName: case-parties
      - deployApiLayerEast:
          layerNameCased: Case Meta
          serverlessRunName: case-meta
      - deployApiLayerEast:
          layerNameCased: Case Documents
          serverlessRunName: case-documents
      - deployApiLayerEast:
          layerNameCased: Case Deadlines
          serverlessRunName: case-deadlines
      - deployApiLayerEast:
          layerNameCased: Case Notes
          serverlessRunName: case-notes
      - deployApiLayerEast:
          layerNameCased: Users
          serverlessRunName: users
      - deployApiLayerEast:
          layerNameCased: Documents
          serverlessRunName: documents
      - deployApiLayerEast:
          layerNameCased: Work Items
          serverlessRunName: work-items
      - deployApiLayerEast:
          layerNameCased: Sections
          serverlessRunName: sections
      - deployApiLayerEast:
          layerNameCased: Trial Sessions
          serverlessRunName: trial-sessions
      - deployApiLayerEast:
          layerNameCased: Notifications
          serverlessRunName: notifications
      - deployApiLayerEast:
          layerNameCased: Streams
          serverlessRunName: streams
      - deployApiLayerEast:
          layerNameCased: Migrate
          serverlessRunName: migrate

  deploy-api-west:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - setupEnv
      - buildDockerImage
      - deployApiLayerWest:
          layerNameCased: Public Puppeteer
          serverlessRunName: puppeteer
          deployIf: $(./web-api/deploy-diff.sh $ENV web-api/runtimes/puppeteer) = "true"
      - deployApiLayerWest:
          layerNameCased: Public ClamAV
          serverlessRunName: clamav
          deployIf: $(./web-api/deploy-diff.sh $ENV web-api/runtimes/clamav) = "true"
      - deployApiLayerWest:
          layerNameCased: Public API
          serverlessRunName: public-api
      - deployApiLayerWest:
          layerNameCased: API
          serverlessRunName: api
      - deployApiLayerWest:
          layerNameCased: Cases
          serverlessRunName: cases
      - deployApiLayerWest:
          layerNameCased: Case Parties
          serverlessRunName: case-parties
      - deployApiLayerWest:
          layerNameCased: Case Meta
          serverlessRunName: case-meta
      - deployApiLayerWest:
          layerNameCased: Case Documents
          serverlessRunName: case-documents
      - deployApiLayerWest:
          layerNameCased: Case Deadlines
          serverlessRunName: case-deadlines
      - deployApiLayerWest:
          layerNameCased: Case Notes
          serverlessRunName: case-notes
      - deployApiLayerWest:
          layerNameCased: Users
          serverlessRunName: users
      - deployApiLayerWest:
          layerNameCased: Documents
          serverlessRunName: documents
      - deployApiLayerWest:
          layerNameCased: Work Items
          serverlessRunName: work-items
      - deployApiLayerWest:
          layerNameCased: Sections
          serverlessRunName: sections
      - deployApiLayerWest:
          layerNameCased: Trial Sessions
          serverlessRunName: trial-sessions
      - deployApiLayerWest:
          layerNameCased: Notifications
          serverlessRunName: notifications
      - deployApiLayerWest:
          layerNameCased: Streams
          serverlessRunName: streams
      - deployApiLayerWest:
          layerNameCased: Migrate
          serverlessRunName: migrate

  switch-and-deploy-ui:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - setupEnv
      - buildDockerImage
      - run:
          name: 'Deploy - Switch environment color'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "cd web-api && ./switch-environment-color.sh ${ENV}"
      - run:
          name: 'Deploy - Web Client - S3'
          command: docker run -e "DYNAMSOFT_URL_OVERRIDE=${DYNAMSOFT_URL_OVERRIDE}" -e "ENV=${ENV}" -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "COGNITO_SUFFIX=${COGNITO_SUFFIX}" -e "CIRCLE_SHA1=${CIRCLE_SHA1}" --rm efcms /bin/sh -c "./web-client/build-dist.sh $ENV && aws s3 sync dist s3://ui-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache && aws s3 sync dist s3://failover-ui-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache"
      - run:
          name: 'Deploy - Public Web Client - S3'
          command: docker run -e "ENV=${ENV}" -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -e "COGNITO_SUFFIX=${COGNITO_SUFFIX}" -e "CIRCLE_SHA1=${CIRCLE_SHA1}" --rm efcms /bin/sh -c "./web-client/build-dist-public.sh $ENV && aws s3 sync dist-public s3://ui-public-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache && aws s3 sync dist-public s3://failover-ui-public-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache"

  post-deploy:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build -t efcms -f Dockerfile .
      - setupEnv
      - run:
          name: 'Deploy - Web API - Route53'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "cd web-api && ./setup-regional-route53.sh ${ENV}"
      - run:
          name: 'Deploy - Web WS - Route53'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "cd web-api && ./setup-regional-route53-ws.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Global Tables'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && node setup-global-tables.js efcms-${ENV} us-east-1,us-west-1"
      - run:
          name: 'Deploy - Web API - Cognito Customize'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && ./setup-cognito-ui.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Cognito Create Users'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "USTC_ADMIN_PASS=${USTC_ADMIN_PASS}" --rm efcms /bin/sh -c "cd web-api && ./setup-cognito-users.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Cognito Create Court Users'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "USTC_ADMIN_PASS=${USTC_ADMIN_PASS}" --rm efcms /bin/sh -c "cd web-api && ./setup-court-users.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Run Migrations'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "DYNAMODB_ENDPOINT=dynamodb.us-east-1.amazonaws.com" --rm efcms /bin/sh -c "npm run build:assets && ./web-api/run-umzug.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Smoke Tests - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && node smoke-tests.js ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Smoke Tests - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && node smoke-tests.js ${ENV} us-west-1"
      - run:
          name: 'Deploy - Cypress Smoke Tests'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "CYPRESS_BASE_URL='https://ui-$ENV.$EFCMS_DOMAIN' ENV=${ENV} npm run cypress:smoketests"

workflows:
  version: 2
  hourly:
    jobs:
      - bundle
      - build-shared:
          requires:
            - bundle
      - build-api:
          requires:
            - bundle
      - build-client:
          requires:
            - bundle
      - e2e-pa11y:
          requires:
            - bundle
      - e2e-cypress:
          requires:
            - bundle
      - pre-deploy:
          requires:
            - build-shared
            - build-api
            - build-client
            - e2e-pa11y
            - e2e-cypress
      - deploy-api-west:
          requires:
            - pre-deploy
      - deploy-api-east:
          requires:
            - pre-deploy
      - switch-and-deploy-ui:
          requires:
            - deploy-api-west
            - deploy-api-east
      - post-deploy:
          requires:
            - switch-and-deploy-ui
    triggers:
      - schedule:
          cron: '0 12-23 * * 1-5'
          filters:
            branches:
              only:
                - develop
  build-and-deploy:
    jobs:
      - bundle:
          filters:
            branches:
              ignore:
                - develop
      - build-shared:
          requires:
            - bundle
          filters:
            branches:
              ignore:
                - develop
      - build-api:
          requires:
            - bundle
          filters:
            branches:
              ignore:
                - develop
      - build-client:
          requires:
            - bundle
          filters:
            branches:
              ignore:
                - develop
      - e2e-pa11y:
          requires:
            - bundle
          filters:
            branches:
              ignore:
                - develop
      - e2e-cypress:
          requires:
            - bundle
          filters:
            branches:
              ignore:
                - develop
      - pre-deploy:
          requires:
            - build-shared
            - build-api
            - build-client
            - e2e-pa11y
            - e2e-cypress
          filters:
            branches:
              only:
                - staging
                - test
                - master
                - experimental
      - deploy-api-east:
          requires:
            - pre-deploy
          filters:
            branches:
              only:
                - staging
                - test
                - master
                - experimental
      - deploy-api-west:
          requires:
            - pre-deploy
          filters:
            branches:
              only:
                - staging
                - test
                - master
                - experimental
      - switch-and-deploy-ui:
          requires:
            - deploy-api-west
            - deploy-api-east
          filters:
            branches:
              only:
                - staging
                - test
                - master
                - experimental
      - post-deploy:
          requires:
            - switch-and-deploy-ui
          filters:
            branches:
              only:
                - staging
                - test
                - master
                - experimental
